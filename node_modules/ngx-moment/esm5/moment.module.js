import { __assign, __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { NGX_MOMENT_OPTIONS } from './moment-options';
import { AddPipe } from './add.pipe';
import { CalendarPipe } from './calendar.pipe';
import { DateFormatPipe } from './date-format.pipe';
import { DifferencePipe } from './difference.pipe';
import { DurationPipe } from './duration.pipe';
import { FromUnixPipe } from './from-unix.pipe';
import { FromUtcPipe } from './from-utc.pipe';
import { IsAfterPipe } from './is-after.pipe';
import { IsBeforePipe } from './is-before.pipe';
import { LocalTimePipe } from './local.pipe';
import { LocalePipe } from './locale.pipe';
import { ParsePipe } from './parse.pipe';
import { ParseZonePipe } from './parse-zone.pipe';
import { SubtractPipe } from './subtract.pipe';
import { TimeAgoPipe } from './time-ago.pipe';
import { UtcPipe } from './utc.pipe';
var ANGULAR_MOMENT_PIPES = [
    AddPipe,
    CalendarPipe,
    DateFormatPipe,
    DifferencePipe,
    DurationPipe,
    FromUnixPipe,
    ParsePipe,
    SubtractPipe,
    TimeAgoPipe,
    UtcPipe,
    FromUtcPipe,
    LocalTimePipe,
    LocalePipe,
    ParseZonePipe,
    IsBeforePipe,
    IsAfterPipe,
];
var MomentModule = /** @class */ (function () {
    function MomentModule() {
    }
    MomentModule_1 = MomentModule;
    MomentModule.forRoot = function (options) {
        return {
            ngModule: MomentModule_1,
            providers: [
                {
                    provide: NGX_MOMENT_OPTIONS,
                    useValue: __assign({}, options),
                },
            ],
        };
    };
    var MomentModule_1;
    MomentModule = MomentModule_1 = __decorate([
        NgModule({
            declarations: ANGULAR_MOMENT_PIPES,
            exports: ANGULAR_MOMENT_PIPES,
        })
    ], MomentModule);
    return MomentModule;
}());
export { MomentModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9tZW50Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tb21lbnQvIiwic291cmNlcyI6WyJtb21lbnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQW9CLE1BQU0sa0JBQWtCLENBQUM7QUFFeEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFckMsSUFBTSxvQkFBb0IsR0FBRztJQUMzQixPQUFPO0lBQ1AsWUFBWTtJQUNaLGNBQWM7SUFDZCxjQUFjO0lBQ2QsWUFBWTtJQUNaLFlBQVk7SUFDWixTQUFTO0lBQ1QsWUFBWTtJQUNaLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLGFBQWE7SUFDYixVQUFVO0lBQ1YsYUFBYTtJQUNiLFlBQVk7SUFDWixXQUFXO0NBQ1osQ0FBQztBQU1GO0lBQUE7SUFjQSxDQUFDO3FCQWRZLFlBQVk7SUFDaEIsb0JBQU8sR0FBZCxVQUFlLE9BQTBCO1FBQ3ZDLE9BQU87WUFDTCxRQUFRLEVBQUUsY0FBWTtZQUN0QixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGtCQUFrQjtvQkFDM0IsUUFBUSxlQUNILE9BQU8sQ0FDWDtpQkFDRjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O0lBYlUsWUFBWTtRQUp4QixRQUFRLENBQUM7WUFDUixZQUFZLEVBQUUsb0JBQW9CO1lBQ2xDLE9BQU8sRUFBRSxvQkFBb0I7U0FDOUIsQ0FBQztPQUNXLFlBQVksQ0FjeEI7SUFBRCxtQkFBQztDQUFBLEFBZEQsSUFjQztTQWRZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdYX01PTUVOVF9PUFRJT05TLCBOZ3hNb21lbnRPcHRpb25zIH0gZnJvbSAnLi9tb21lbnQtb3B0aW9ucyc7XG5cbmltcG9ydCB7IEFkZFBpcGUgfSBmcm9tICcuL2FkZC5waXBlJztcbmltcG9ydCB7IENhbGVuZGFyUGlwZSB9IGZyb20gJy4vY2FsZW5kYXIucGlwZSc7XG5pbXBvcnQgeyBEYXRlRm9ybWF0UGlwZSB9IGZyb20gJy4vZGF0ZS1mb3JtYXQucGlwZSc7XG5pbXBvcnQgeyBEaWZmZXJlbmNlUGlwZSB9IGZyb20gJy4vZGlmZmVyZW5jZS5waXBlJztcbmltcG9ydCB7IER1cmF0aW9uUGlwZSB9IGZyb20gJy4vZHVyYXRpb24ucGlwZSc7XG5pbXBvcnQgeyBGcm9tVW5peFBpcGUgfSBmcm9tICcuL2Zyb20tdW5peC5waXBlJztcbmltcG9ydCB7IEZyb21VdGNQaXBlIH0gZnJvbSAnLi9mcm9tLXV0Yy5waXBlJztcbmltcG9ydCB7IElzQWZ0ZXJQaXBlIH0gZnJvbSAnLi9pcy1hZnRlci5waXBlJztcbmltcG9ydCB7IElzQmVmb3JlUGlwZSB9IGZyb20gJy4vaXMtYmVmb3JlLnBpcGUnO1xuaW1wb3J0IHsgTG9jYWxUaW1lUGlwZSB9IGZyb20gJy4vbG9jYWwucGlwZSc7XG5pbXBvcnQgeyBMb2NhbGVQaXBlIH0gZnJvbSAnLi9sb2NhbGUucGlwZSc7XG5pbXBvcnQgeyBQYXJzZVBpcGUgfSBmcm9tICcuL3BhcnNlLnBpcGUnO1xuaW1wb3J0IHsgUGFyc2Vab25lUGlwZSB9IGZyb20gJy4vcGFyc2Utem9uZS5waXBlJztcbmltcG9ydCB7IFN1YnRyYWN0UGlwZSB9IGZyb20gJy4vc3VidHJhY3QucGlwZSc7XG5pbXBvcnQgeyBUaW1lQWdvUGlwZSB9IGZyb20gJy4vdGltZS1hZ28ucGlwZSc7XG5pbXBvcnQgeyBVdGNQaXBlIH0gZnJvbSAnLi91dGMucGlwZSc7XG5cbmNvbnN0IEFOR1VMQVJfTU9NRU5UX1BJUEVTID0gW1xuICBBZGRQaXBlLFxuICBDYWxlbmRhclBpcGUsXG4gIERhdGVGb3JtYXRQaXBlLFxuICBEaWZmZXJlbmNlUGlwZSxcbiAgRHVyYXRpb25QaXBlLFxuICBGcm9tVW5peFBpcGUsXG4gIFBhcnNlUGlwZSxcbiAgU3VidHJhY3RQaXBlLFxuICBUaW1lQWdvUGlwZSxcbiAgVXRjUGlwZSxcbiAgRnJvbVV0Y1BpcGUsXG4gIExvY2FsVGltZVBpcGUsXG4gIExvY2FsZVBpcGUsXG4gIFBhcnNlWm9uZVBpcGUsXG4gIElzQmVmb3JlUGlwZSxcbiAgSXNBZnRlclBpcGUsXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IEFOR1VMQVJfTU9NRU5UX1BJUEVTLFxuICBleHBvcnRzOiBBTkdVTEFSX01PTUVOVF9QSVBFUyxcbn0pXG5leHBvcnQgY2xhc3MgTW9tZW50TW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3Qob3B0aW9ucz86IE5neE1vbWVudE9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE1vbWVudE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTkdYX01PTUVOVF9PUFRJT05TLFxuICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==